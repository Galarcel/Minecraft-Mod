buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath files('libs/plugins/mixingradle-0.7-custom.jar')    
    }
}

/* I'm pretty sure this new plugin section I added is 
   just another way of adding the gradle and eclipse 
   plugins, albeit with specified version numbers? also
   what is this "idea" plugin thingy welp who knows
    (also added this stuff from maximuslotr) */ 
plugins {
    id 'idea'
    id 'com.diffplug.eclipse.apt' version '3.35.0'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

apply plugin: 'org.spongepowered.mixin'
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.16.5-1.0' // the version of your mod. Put minecraft version in front here, then your mod version
// the group is basically the package that contains your mod, can also be thought of as the reverse domain
group = 'net.galarcel.tutorialmod' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'tutorialmod'// unique ID that refers to your mod

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20210309-1.16.5' // fields and methods versions we are going to use
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    //  idk wht this does other than create some variable named accessTransformer
    // it seems to be used to transform elements of a file in META-INF) 
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                tutorialmod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                tutorialmod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'tutorialmod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                tutorialmod {
                    source sourceSets.main
                }
            }
        }
    }
}
// this is in the maximus file idk what it adds
// repositories {
//     flatDir {
//         dirs 'libs'
//     }
// }
// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
// added this from maximus
sourceSets {
    def deps = [
		configurations.minecraft,
		//configurations.compile,
		configurations.compileClasspath,
		configurations.runtimeClasspath
	]
	main {
		compileClasspath += files(deps)
        ext.refMap = "mixins.lotrextended.refmap.json"
	}
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    // minecraft 'net.minecraftforge:forge:1.16.5-36.2.34'
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.39' // updated dependency

  	//lotr mod dep
	implementation fg.deobf("lotr:lotr-1.16-renewed:5.5")
    //annonations processor
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'  
    
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "tutorialmod",
            "Specification-Vendor": "tutorialmodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"tutorialmodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// mixin configurations (maximus)
mixin {
    add sourceSets.main, "mixins.lotrextended.refmap.json"

    config 'mixins.lotrextended.json'
    disableTargetValidator = false
    overwriteErrorLevel = 'error'
}

// Configure server resource processing
project.processResources {
	from (sourceSets.main.resources.srcDirs) {
		include 'META-INF/mods.toml'
		duplicatesStrategy = DuplicatesStrategy.INCLUDE
		expand (
			'version': project.version
		)
	}
}

// added the non-commented out section from maximus, idk what the difference is
// between these two 

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "lotrextended",
            "Specification-Vendor": "lotrextended",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "MDK",
            "Implementation-Version": "lotrextended",
            "Implementation-Vendor" :"lotrextended",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "mixins.lotrextended.json",
            "FMLAT": "accesstransformer.cfg"
        ])
    }
}

/************************************************************
 * Others
 */

reobf {
	jar{}
}


// Notes: I think I am going to keep this repo public. Not really adding anything
// on here that could be considered important (just really setting config)
// ok yeh

// // Example configuration to allow publishing using the maven-publish task
// // This is the preferred method to reobfuscate your jar file
// jar.finalizedBy('reobfJar') 
// // However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// //publish.dependsOn('reobfJar')

// publishing {
//     publications {
//         mavenJava(MavenPublication) {
//             artifact jar
//         }
//     }
//     repositories {
//         maven {
//             url "file:///${project.projectDir}/mcmodsrepo"
//         }
//     }
// }
